/* This file was generated by SableCC (http://www.sablecc.org/). */

package minipython.lexer;

import java.io.*;
import java.util.*;
import minipython.node.*;

public class Lexer
{
    protected Token token;
    protected State state = State.INITIAL;

    private PushbackReader in;
    private int line;
    private int pos;
    private boolean cr;
    private boolean eof;
    private final StringBuffer text = new StringBuffer();

    protected void filter() throws LexerException, IOException
    {
    }

    public Lexer(PushbackReader in)
    {
        this.in = in;

        if(gotoTable == null)
        {
            try
            {
                DataInputStream s = new DataInputStream(
                    new BufferedInputStream(
                    Lexer.class.getResourceAsStream("lexer.dat")));

                // read gotoTable
                int length = s.readInt();
                gotoTable = new int[length][][][];
                for(int i = 0; i < gotoTable.length; i++)
                {
                    length = s.readInt();
                    gotoTable[i] = new int[length][][];
                    for(int j = 0; j < gotoTable[i].length; j++)
                    {
                        length = s.readInt();
                        gotoTable[i][j] = new int[length][3];
                        for(int k = 0; k < gotoTable[i][j].length; k++)
                        {
                            for(int l = 0; l < 3; l++)
                            {
                                gotoTable[i][j][k][l] = s.readInt();
                            }
                        }
                    }
                }

                // read accept
                length = s.readInt();
                accept = new int[length][];
                for(int i = 0; i < accept.length; i++)
                {
                    length = s.readInt();
                    accept[i] = new int[length];
                    for(int j = 0; j < accept[i].length; j++)
                    {
                        accept[i][j] = s.readInt();
                    }
                }

                s.close();
            }
            catch(Exception e)
            {
                throw new RuntimeException("The file \"lexer.dat\" is either missing or corrupted.");
            }
        }
    }

    public Token peek() throws LexerException, IOException
    {
        while(token == null)
        {
            token = getToken();
            filter();
        }

        return token;
    }

    public Token next() throws LexerException, IOException
    {
        while(token == null)
        {
            token = getToken();
            filter();
        }

        Token result = token;
        token = null;
        return result;
    }

    protected Token getToken() throws IOException, LexerException
    {
        int dfa_state = 0;

        int start_pos = pos;
        int start_line = line;

        int accept_state = -1;
        int accept_token = -1;
        int accept_length = -1;
        int accept_pos = -1;
        int accept_line = -1;

        int[][][] gotoTable = this.gotoTable[state.id()];
        int[] accept = this.accept[state.id()];
        text.setLength(0);

        while(true)
        {
            int c = getChar();

            if(c != -1)
            {
                switch(c)
                {
                case 10:
                    if(cr)
                    {
                        cr = false;
                    }
                    else
                    {
                        line++;
                        pos = 0;
                    }
                    break;
                case 13:
                    line++;
                    pos = 0;
                    cr = true;
                    break;
                default:
                    pos++;
                    cr = false;
                    break;
                };

                text.append((char) c);

                do
                {
                    int oldState = (dfa_state < -1) ? (-2 -dfa_state) : dfa_state;

                    dfa_state = -1;

                    int[][] tmp1 =  gotoTable[oldState];
                    int low = 0;
                    int high = tmp1.length - 1;

                    while(low <= high)
                    {
                        int middle = (low + high) / 2;
                        int[] tmp2 = tmp1[middle];

                        if(c < tmp2[0])
                        {
                            high = middle - 1;
                        }
                        else if(c > tmp2[1])
                        {
                            low = middle + 1;
                        }
                        else
                        {
                            dfa_state = tmp2[2];
                            break;
                        }
                    }
                }while(dfa_state < -1);
            }
            else
            {
                dfa_state = -1;
            }

            if(dfa_state >= 0)
            {
                if(accept[dfa_state] != -1)
                {
                    accept_state = dfa_state;
                    accept_token = accept[dfa_state];
                    accept_length = text.length();
                    accept_pos = pos;
                    accept_line = line;
                }
            }
            else
            {
                if(accept_state != -1)
                {
                    switch(accept_token)
                    {
                    case 0:
                        {
                            Token token = new0(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 1:
                        {
                            Token token = new1(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 2:
                        {
                            Token token = new2(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 3:
                        {
                            Token token = new3(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 4:
                        {
                            Token token = new4(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 5:
                        {
                            Token token = new5(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 6:
                        {
                            Token token = new6(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 7:
                        {
                            Token token = new7(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 8:
                        {
                            Token token = new8(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 9:
                        {
                            Token token = new9(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 10:
                        {
                            Token token = new10(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 11:
                        {
                            Token token = new11(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 12:
                        {
                            Token token = new12(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 13:
                        {
                            Token token = new13(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 14:
                        {
                            Token token = new14(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 15:
                        {
                            Token token = new15(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 16:
                        {
                            Token token = new16(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 17:
                        {
                            Token token = new17(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 18:
                        {
                            Token token = new18(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 19:
                        {
                            Token token = new19(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 20:
                        {
                            Token token = new20(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 21:
                        {
                            Token token = new21(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 22:
                        {
                            Token token = new22(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 23:
                        {
                            Token token = new23(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 24:
                        {
                            Token token = new24(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 25:
                        {
                            Token token = new25(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 26:
                        {
                            Token token = new26(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 27:
                        {
                            Token token = new27(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 28:
                        {
                            Token token = new28(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 29:
                        {
                            Token token = new29(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 30:
                        {
                            Token token = new30(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 31:
                        {
                            Token token = new31(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 32:
                        {
                            Token token = new32(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 33:
                        {
                            Token token = new33(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 34:
                        {
                            Token token = new34(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 35:
                        {
                            Token token = new35(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 36:
                        {
                            Token token = new36(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 37:
                        {
                            Token token = new37(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 38:
                        {
                            Token token = new38(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 39:
                        {
                            Token token = new39(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 40:
                        {
                            Token token = new40(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 41:
                        {
                            Token token = new41(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 42:
                        {
                            Token token = new42(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 43:
                        {
                            Token token = new43(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 44:
                        {
                            Token token = new44(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 45:
                        {
                            Token token = new45(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 46:
                        {
                            Token token = new46(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 47:
                        {
                            Token token = new47(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 48:
                        {
                            Token token = new48(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 49:
                        {
                            Token token = new49(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 50:
                        {
                            Token token = new50(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 51:
                        {
                            Token token = new51(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 52:
                        {
                            Token token = new52(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 53:
                        {
                            Token token = new53(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 54:
                        {
                            Token token = new54(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 55:
                        {
                            Token token = new55(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 56:
                        {
                            Token token = new56(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    }
                }
                else
                {
                    if(text.length() > 0)
                    {
                        throw new LexerException(
                            "[" + (start_line + 1) + "," + (start_pos + 1) + "]" +
                            " Unknown token: " + text);
                    }
                    else
                    {
                        EOF token = new EOF(
                            start_line + 1,
                            start_pos + 1);
                        return token;
                    }
                }
            }
        }
    }

    Token new0(String text, int line, int pos) { return new TTab(text, line, pos); }
    Token new1(String text, int line, int pos) { return new TDot(text, line, pos); }
    Token new2(int line, int pos) { return new TClassToken(line, pos); }
    Token new3(int line, int pos) { return new TDef(line, pos); }
    Token new4(int line, int pos) { return new TLSqBrack(line, pos); }
    Token new5(int line, int pos) { return new TRSqBrack(line, pos); }
    Token new6(int line, int pos) { return new TLPar(line, pos); }
    Token new7(int line, int pos) { return new TRPar(line, pos); }
    Token new8(int line, int pos) { return new TExclam(line, pos); }
    Token new9(int line, int pos) { return new TPlusplus(line, pos); }
    Token new10(int line, int pos) { return new TMinmin(line, pos); }
    Token new11(int line, int pos) { return new TDmult(line, pos); }
    Token new12(int line, int pos) { return new TMult(line, pos); }
    Token new13(int line, int pos) { return new TDiv(line, pos); }
    Token new14(int line, int pos) { return new TMod(line, pos); }
    Token new15(int line, int pos) { return new TPlus(line, pos); }
    Token new16(int line, int pos) { return new TMinus(line, pos); }
    Token new17(int line, int pos) { return new TEqeq(line, pos); }
    Token new18(int line, int pos) { return new TNoteq(line, pos); }
    Token new19(int line, int pos) { return new TLesseq(line, pos); }
    Token new20(int line, int pos) { return new TMoreeq(line, pos); }
    Token new21(int line, int pos) { return new TLess(line, pos); }
    Token new22(int line, int pos) { return new TGreat(line, pos); }
    Token new23(int line, int pos) { return new TLogicAnd(line, pos); }
    Token new24(int line, int pos) { return new TDiveq(line, pos); }
    Token new25(int line, int pos) { return new TMulteq(line, pos); }
    Token new26(int line, int pos) { return new TPluseq(line, pos); }
    Token new27(int line, int pos) { return new TMineq(line, pos); }
    Token new28(int line, int pos) { return new TAssert(line, pos); }
    Token new29(int line, int pos) { return new TLen(line, pos); }
    Token new30(int line, int pos) { return new TMax(line, pos); }
    Token new31(int line, int pos) { return new TMin(line, pos); }
    Token new32(int line, int pos) { return new TNot(line, pos); }
    Token new33(int line, int pos) { return new TNone(line, pos); }
    Token new34(int line, int pos) { return new TAnd(line, pos); }
    Token new35(int line, int pos) { return new TOr(line, pos); }
    Token new36(int line, int pos) { return new TEq(line, pos); }
    Token new37(int line, int pos) { return new TComma(line, pos); }
    Token new38(int line, int pos) { return new TIf(line, pos); }
    Token new39(int line, int pos) { return new TElif(line, pos); }
    Token new40(int line, int pos) { return new TElse(line, pos); }
    Token new41(int line, int pos) { return new TFor(line, pos); }
    Token new42(int line, int pos) { return new TIn(line, pos); }
    Token new43(int line, int pos) { return new TWhile(line, pos); }
    Token new44(int line, int pos) { return new TPrint(line, pos); }
    Token new45(int line, int pos) { return new TReturn(line, pos); }
    Token new46(int line, int pos) { return new TSemi(line, pos); }
    Token new47(int line, int pos) { return new TTrue(line, pos); }
    Token new48(int line, int pos) { return new TFalse(line, pos); }
    Token new49(int line, int pos) { return new TDictt(line, pos); }
    Token new50(int line, int pos) { return new TQuote(line, pos); }
    Token new51(int line, int pos) { return new TSinquote(line, pos); }
    Token new52(String text, int line, int pos) { return new TBlank(text, line, pos); }
    Token new53(String text, int line, int pos) { return new TLineComment(text, line, pos); }
    Token new54(String text, int line, int pos) { return new TNumber(text, line, pos); }
    Token new55(String text, int line, int pos) { return new TString(text, line, pos); }
    Token new56(String text, int line, int pos) { return new TId(text, line, pos); }

    private int getChar() throws IOException
    {
        if(eof)
        {
            return -1;
        }

        int result = in.read();

        if(result == -1)
        {
            eof = true;
        }

        return result;
    }

    private void pushBack(int acceptLength) throws IOException
    {
        int length = text.length();
        for(int i = length - 1; i >= acceptLength; i--)
        {
            eof = false;

            in.unread(text.charAt(i));
        }
    }

    protected void unread(Token token) throws IOException
    {
        String text = token.getText();
        int length = text.length();

        for(int i = length - 1; i >= 0; i--)
        {
            eof = false;

            in.unread(text.charAt(i));
        }

        pos = token.getPos() - 1;
        line = token.getLine() - 1;
    }

    private String getText(int acceptLength)
    {
        StringBuffer s = new StringBuffer(acceptLength);
        for(int i = 0; i < acceptLength; i++)
        {
            s.append(text.charAt(i));
        }

        return s.toString();
    }

    private static int[][][][] gotoTable;
/*  {
        { // INITIAL
            {{9, 9, 1}, {10, 10, 2}, {13, 13, 3}, {32, 32, 4}, {33, 33, 5}, {34, 34, 6}, {35, 35, 7}, {37, 37, 8}, {38, 38, 9}, {39, 39, 10}, {40, 40, 11}, {41, 41, 12}, {42, 42, 13}, {43, 43, 14}, {44, 44, 15}, {45, 45, 16}, {46, 46, 17}, {47, 47, 18}, {48, 57, 19}, {58, 58, 20}, {60, 60, 21}, {61, 61, 22}, {62, 62, 23}, {65, 77, 24}, {78, 78, 25}, {79, 90, 24}, {91, 91, 26}, {93, 93, 27}, {95, 95, 28}, {97, 97, 29}, {98, 98, 30}, {99, 99, 31}, {100, 100, 32}, {101, 101, 33}, {102, 102, 34}, {103, 104, 30}, {105, 105, 35}, {106, 107, 30}, {108, 108, 36}, {109, 109, 37}, {110, 110, 38}, {111, 111, 39}, {112, 112, 40}, {113, 113, 30}, {114, 114, 41}, {115, 115, 30}, {116, 116, 42}, {117, 118, 30}, {119, 119, 43}, {120, 122, 30}, },
            {},
            {},
            {},
            {},
            {{61, 61, 44}, },
            {{32, 32, 45}, {34, 34, 46}, {48, 57, 47}, {65, 90, 48}, {95, 95, 49}, {97, 122, 50}, },
            {{0, 9, 51}, {10, 10, 52}, {11, 12, 51}, {13, 13, 53}, {14, 127, 51}, },
            {},
            {{38, 38, 54}, },
            {{32, 32, 55}, {39, 39, 56}, {48, 57, 57}, {65, 90, 58}, {95, 95, 59}, {97, 122, 60}, },
            {},
            {},
            {{42, 42, 61}, {61, 61, 62}, },
            {{43, 43, 63}, {61, 61, 64}, },
            {},
            {{45, 45, 65}, {61, 61, 66}, },
            {},
            {{61, 61, 67}, },
            {{46, 46, 68}, {48, 57, 19}, },
            {},
            {{61, 61, 69}, },
            {{61, 61, 70}, },
            {{61, 61, 71}, },
            {{48, 57, 72}, {65, 90, 73}, {95, 95, 74}, {97, 122, 75}, },
            {{48, 95, -26}, {97, 110, 75}, {111, 111, 76}, {112, 122, 75}, },
            {},
            {},
            {{48, 122, -26}, },
            {{48, 95, -26}, {97, 109, 75}, {110, 110, 77}, {111, 114, 75}, {115, 115, 78}, {116, 122, 75}, },
            {{48, 122, -26}, },
            {{48, 95, -26}, {97, 107, 75}, {108, 108, 79}, {109, 122, 75}, },
            {{48, 95, -26}, {97, 100, 75}, {101, 101, 80}, {102, 104, 75}, {105, 105, 81}, {106, 122, 75}, },
            {{48, 107, -33}, {108, 108, 82}, {109, 122, 75}, },
            {{48, 95, -26}, {97, 97, 83}, {98, 110, 75}, {111, 111, 84}, {112, 122, 75}, },
            {{48, 95, -26}, {97, 101, 75}, {102, 102, 85}, {103, 109, 75}, {110, 110, 86}, {111, 122, 75}, },
            {{48, 100, -34}, {101, 101, 87}, {102, 122, 75}, },
            {{48, 95, -26}, {97, 97, 88}, {98, 104, 75}, {105, 105, 89}, {106, 122, 75}, },
            {{48, 110, -27}, {111, 111, 90}, {112, 122, 75}, },
            {{48, 95, -26}, {97, 113, 75}, {114, 114, 91}, {115, 122, 75}, },
            {{48, 113, -41}, {114, 114, 92}, {115, 122, 75}, },
            {{48, 100, -34}, {101, 101, 93}, {102, 122, 75}, },
            {{48, 113, -41}, {114, 114, 94}, {115, 122, 75}, },
            {{48, 95, -26}, {97, 103, 75}, {104, 104, 95}, {105, 122, 75}, },
            {},
            {{32, 122, -8}, },
            {},
            {{32, 122, -8}, },
            {{32, 122, -8}, },
            {{32, 122, -8}, },
            {{32, 122, -8}, },
            {{0, 127, -9}, },
            {},
            {{10, 10, 96}, },
            {},
            {{32, 122, -12}, },
            {},
            {{32, 122, -12}, },
            {{32, 122, -12}, },
            {{32, 122, -12}, },
            {{32, 122, -12}, },
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {{48, 57, 97}, },
            {},
            {},
            {},
            {{48, 122, -26}, },
            {{48, 122, -26}, },
            {{48, 122, -26}, },
            {{48, 122, -26}, },
            {{48, 109, -31}, {110, 110, 98}, {111, 122, 75}, },
            {{48, 95, -26}, {97, 99, 75}, {100, 100, 99}, {101, 122, 75}, },
            {{48, 95, -26}, {97, 114, 75}, {115, 115, 100}, {116, 122, 75}, },
            {{48, 95, -26}, {97, 97, 101}, {98, 122, 75}, },
            {{48, 101, -37}, {102, 102, 102}, {103, 122, 75}, },
            {{48, 95, -26}, {97, 98, 75}, {99, 99, 103}, {100, 122, 75}, },
            {{48, 95, -26}, {97, 104, 75}, {105, 105, 104}, {106, 114, 75}, {115, 115, 105}, {116, 122, 75}, },
            {{48, 107, -33}, {108, 108, 106}, {109, 122, 75}, },
            {{48, 113, -41}, {114, 114, 107}, {115, 122, 75}, },
            {{48, 122, -26}, },
            {{48, 122, -26}, },
            {{48, 109, -31}, {110, 110, 108}, {111, 122, 75}, },
            {{48, 95, -26}, {97, 119, 75}, {120, 120, 109}, {121, 122, 75}, },
            {{48, 109, -31}, {110, 110, 110}, {111, 122, 75}, },
            {{48, 95, -26}, {97, 115, 75}, {116, 116, 111}, {117, 122, 75}, },
            {{48, 122, -26}, },
            {{48, 104, -84}, {105, 105, 112}, {106, 122, 75}, },
            {{48, 115, -92}, {116, 116, 113}, {117, 122, 75}, },
            {{48, 95, -26}, {97, 116, 75}, {117, 117, 114}, {118, 122, 75}, },
            {{48, 104, -84}, {105, 105, 115}, {106, 122, 75}, },
            {},
            {{48, 57, 97}, },
            {{48, 100, -34}, {101, 101, 116}, {102, 122, 75}, },
            {{48, 122, -26}, },
            {{48, 100, -34}, {101, 101, 117}, {102, 122, 75}, },
            {{48, 114, -80}, {115, 115, 118}, {116, 122, 75}, },
            {{48, 122, -26}, },
            {{48, 115, -92}, {116, 116, 119}, {117, 122, 75}, },
            {{48, 101, -37}, {102, 102, 120}, {103, 122, 75}, },
            {{48, 100, -34}, {101, 101, 121}, {102, 122, 75}, },
            {{48, 114, -80}, {115, 115, 122}, {116, 122, 75}, },
            {{48, 122, -26}, },
            {{48, 122, -26}, },
            {{48, 122, -26}, },
            {{48, 122, -26}, },
            {{48, 122, -26}, },
            {{48, 109, -31}, {110, 110, 123}, {111, 122, 75}, },
            {{48, 116, -96}, {117, 117, 124}, {118, 122, 75}, },
            {{48, 100, -34}, {101, 101, 125}, {102, 122, 75}, },
            {{48, 107, -33}, {108, 108, 126}, {109, 122, 75}, },
            {{48, 122, -26}, },
            {{48, 113, -41}, {114, 114, 127}, {115, 122, 75}, },
            {{48, 114, -80}, {115, 115, 128}, {116, 122, 75}, },
            {{48, 122, -26}, },
            {{48, 122, -26}, },
            {{48, 122, -26}, },
            {{48, 100, -34}, {101, 101, 129}, {102, 122, 75}, },
            {{48, 115, -92}, {116, 116, 130}, {117, 122, 75}, },
            {{48, 113, -41}, {114, 114, 131}, {115, 122, 75}, },
            {{48, 122, -26}, },
            {{48, 100, -34}, {101, 101, 132}, {102, 122, 75}, },
            {{48, 115, -92}, {116, 116, 133}, {117, 122, 75}, },
            {{48, 122, -26}, },
            {{48, 122, -26}, },
            {{48, 122, -26}, },
            {{48, 109, -31}, {110, 110, 134}, {111, 122, 75}, },
            {{48, 122, -26}, },
            {{48, 122, -26}, },
            {{48, 122, -26}, },
        }
    };*/

    private static int[][] accept;
/*  {
        // INITIAL
        {-1, 0, 52, 52, 52, 8, 50, -1, 14, -1, 51, 6, 7, 12, 15, 37, 16, 1, 13, 54, 46, 21, 36, 22, 56, 56, 4, 5, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 18, -1, 55, -1, -1, -1, -1, -1, 53, 53, 23, -1, 55, -1, -1, -1, -1, 11, 25, 9, 26, 10, 27, 24, -1, 19, 17, 20, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 38, 42, 56, 56, 56, 56, 35, 56, 56, 56, 56, 53, 54, 56, 34, 56, 56, 3, 56, 56, 56, 56, 41, 29, 30, 31, 32, 56, 56, 56, 56, 33, 56, 56, 49, 39, 40, 56, 56, 56, 47, 56, 56, 2, 48, 44, 56, 43, 28, 45, },

    };*/

    public static class State
    {
        public final static State INITIAL = new State(0);

        private int id;

        private State(int id)
        {
            this.id = id;
        }

        public int id()
        {
            return id;
        }
    }
}
