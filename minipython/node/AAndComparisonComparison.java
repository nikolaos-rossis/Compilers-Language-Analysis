/* This file was generated by SableCC (http://www.sablecc.org/). */

package minipython.node;

import java.util.*;
import minipython.analysis.*;

public final class AAndComparisonComparison extends PComparison
{
    private PComparison _lComp_;
    private PComparison _rComp_;

    public AAndComparisonComparison()
    {
    }

    public AAndComparisonComparison(
        PComparison _lComp_,
        PComparison _rComp_)
    {
        setLComp(_lComp_);

        setRComp(_rComp_);

    }
    public Object clone()
    {
        return new AAndComparisonComparison(
            (PComparison) cloneNode(_lComp_),
            (PComparison) cloneNode(_rComp_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAAndComparisonComparison(this);
    }

    public PComparison getLComp()
    {
        return _lComp_;
    }

    public void setLComp(PComparison node)
    {
        if(_lComp_ != null)
        {
            _lComp_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _lComp_ = node;
    }

    public PComparison getRComp()
    {
        return _rComp_;
    }

    public void setRComp(PComparison node)
    {
        if(_rComp_ != null)
        {
            _rComp_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _rComp_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_lComp_)
            + toString(_rComp_);
    }

    void removeChild(Node child)
    {
        if(_lComp_ == child)
        {
            _lComp_ = null;
            return;
        }

        if(_rComp_ == child)
        {
            _rComp_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_lComp_ == oldChild)
        {
            setLComp((PComparison) newChild);
            return;
        }

        if(_rComp_ == oldChild)
        {
            setRComp((PComparison) newChild);
            return;
        }

    }
}
