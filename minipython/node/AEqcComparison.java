/* This file was generated by SableCC (http://www.sablecc.org/). */

package minipython.node;

import java.util.*;
import minipython.analysis.*;

public final class AEqcComparison extends PComparison
{
    private PExpression _lexpr_;
    private PExpression _rexpr_;

    public AEqcComparison()
    {
    }

    public AEqcComparison(
        PExpression _lexpr_,
        PExpression _rexpr_)
    {
        setLexpr(_lexpr_);

        setRexpr(_rexpr_);

    }
    public Object clone()
    {
        return new AEqcComparison(
            (PExpression) cloneNode(_lexpr_),
            (PExpression) cloneNode(_rexpr_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAEqcComparison(this);
    }

    public PExpression getLexpr()
    {
        return _lexpr_;
    }

    public void setLexpr(PExpression node)
    {
        if(_lexpr_ != null)
        {
            _lexpr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _lexpr_ = node;
    }

    public PExpression getRexpr()
    {
        return _rexpr_;
    }

    public void setRexpr(PExpression node)
    {
        if(_rexpr_ != null)
        {
            _rexpr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _rexpr_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_lexpr_)
            + toString(_rexpr_);
    }

    void removeChild(Node child)
    {
        if(_lexpr_ == child)
        {
            _lexpr_ = null;
            return;
        }

        if(_rexpr_ == child)
        {
            _rexpr_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_lexpr_ == oldChild)
        {
            setLexpr((PExpression) newChild);
            return;
        }

        if(_rexpr_ == oldChild)
        {
            setRexpr((PExpression) newChild);
            return;
        }

    }
}
