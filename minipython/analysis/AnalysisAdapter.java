/* This file was generated by SableCC (http://www.sablecc.org/). */

package minipython.analysis;

import java.util.*;
import minipython.node.*;

public class AnalysisAdapter implements Analysis
{
    private Hashtable in;
    private Hashtable out;

    public Object getIn(Node node)
    {
        if(in == null)
        {
            return null;
        }

        return in.get(node);
    }

    public void setIn(Node node, Object in)
    {
        if(this.in == null)
        {
            this.in = new Hashtable(1);
        }

        if(in != null)
        {
            this.in.put(node, in);
        }
        else
        {
            this.in.remove(node);
        }
    }

    public Object getOut(Node node)
    {
        if(out == null)
        {
            return null;
        }

        return out.get(node);
    }

    public void setOut(Node node, Object out)
    {
        if(this.out == null)
        {
            this.out = new Hashtable(1);
        }

        if(out != null)
        {
            this.out.put(node, out);
        }
        else
        {
            this.out.remove(node);
        }
    }
    public void caseStart(Start node)
    {
        defaultCase(node);
    }

    public void caseAProgramme(AProgramme node)
    {
        defaultCase(node);
    }

    public void caseAStatCommands(AStatCommands node)
    {
        defaultCase(node);
    }

    public void caseAFunctCommands(AFunctCommands node)
    {
        defaultCase(node);
    }

    public void caseAFunction(AFunction node)
    {
        defaultCase(node);
    }

    public void caseAArgument(AArgument node)
    {
        defaultCase(node);
    }

    public void caseAIfStmtStatement(AIfStmtStatement node)
    {
        defaultCase(node);
    }

    public void caseAWhileStmtStatement(AWhileStmtStatement node)
    {
        defaultCase(node);
    }

    public void caseAForStmtStatement(AForStmtStatement node)
    {
        defaultCase(node);
    }

    public void caseAReturnStmtStatement(AReturnStmtStatement node)
    {
        defaultCase(node);
    }

    public void caseAPrintStmtStatement(APrintStmtStatement node)
    {
        defaultCase(node);
    }

    public void caseAEqStmtStatement(AEqStmtStatement node)
    {
        defaultCase(node);
    }

    public void caseAMineqStmtStatement(AMineqStmtStatement node)
    {
        defaultCase(node);
    }

    public void caseADiveqStmtStatement(ADiveqStmtStatement node)
    {
        defaultCase(node);
    }

    public void caseAArrayStmtStatement(AArrayStmtStatement node)
    {
        defaultCase(node);
    }

    public void caseAAssertStmtStatement(AAssertStmtStatement node)
    {
        defaultCase(node);
    }

    public void caseAFunccallStmtStatement(AFunccallStmtStatement node)
    {
        defaultCase(node);
    }

    public void caseAOrcComparison(AOrcComparison node)
    {
        defaultCase(node);
    }

    public void caseAAndComparisonComparison(AAndComparisonComparison node)
    {
        defaultCase(node);
    }

    public void caseANotcComparison(ANotcComparison node)
    {
        defaultCase(node);
    }

    public void caseAGreatcComparison(AGreatcComparison node)
    {
        defaultCase(node);
    }

    public void caseALesscComparison(ALesscComparison node)
    {
        defaultCase(node);
    }

    public void caseAGreateqcComparison(AGreateqcComparison node)
    {
        defaultCase(node);
    }

    public void caseALesseqcComparison(ALesseqcComparison node)
    {
        defaultCase(node);
    }

    public void caseANoteqcComparison(ANoteqcComparison node)
    {
        defaultCase(node);
    }

    public void caseAEqcComparison(AEqcComparison node)
    {
        defaultCase(node);
    }

    public void caseATrueComparison(ATrueComparison node)
    {
        defaultCase(node);
    }

    public void caseAFalseComparison(AFalseComparison node)
    {
        defaultCase(node);
    }

    public void caseAAddExpression(AAddExpression node)
    {
        defaultCase(node);
    }

    public void caseAMinusExpression(AMinusExpression node)
    {
        defaultCase(node);
    }

    public void caseAMultiplicationExpression(AMultiplicationExpression node)
    {
        defaultCase(node);
    }

    public void caseADivisionExpression(ADivisionExpression node)
    {
        defaultCase(node);
    }

    public void caseAModulusExpression(AModulusExpression node)
    {
        defaultCase(node);
    }

    public void caseAExponExpression(AExponExpression node)
    {
        defaultCase(node);
    }

    public void caseAArrayExpression(AArrayExpression node)
    {
        defaultCase(node);
    }

    public void caseAFuncExpression(AFuncExpression node)
    {
        defaultCase(node);
    }

    public void caseAIdentifierExpression(AIdentifierExpression node)
    {
        defaultCase(node);
    }

    public void caseAValueExpression(AValueExpression node)
    {
        defaultCase(node);
    }

    public void caseAPlusplusExpression(APlusplusExpression node)
    {
        defaultCase(node);
    }

    public void caseAMinminExpression(AMinminExpression node)
    {
        defaultCase(node);
    }

    public void caseALenExpression(ALenExpression node)
    {
        defaultCase(node);
    }

    public void caseAMaxExpression(AMaxExpression node)
    {
        defaultCase(node);
    }

    public void caseAMinExpression(AMinExpression node)
    {
        defaultCase(node);
    }

    public void caseAParExpression(AParExpression node)
    {
        defaultCase(node);
    }

    public void caseASqbrExpression(ASqbrExpression node)
    {
        defaultCase(node);
    }

    public void caseAFunccallExpression(AFunccallExpression node)
    {
        defaultCase(node);
    }

    public void caseAMoreExprExpression(AMoreExprExpression node)
    {
        defaultCase(node);
    }

    public void caseAMoreValExpression(AMoreValExpression node)
    {
        defaultCase(node);
    }

    public void caseANumExpression(ANumExpression node)
    {
        defaultCase(node);
    }

    public void caseAStrExpression(AStrExpression node)
    {
        defaultCase(node);
    }

    public void caseAIdentExpression(AIdentExpression node)
    {
        defaultCase(node);
    }

    public void caseANoneExpression(ANoneExpression node)
    {
        defaultCase(node);
    }

    public void caseAFunctionCall(AFunctionCall node)
    {
        defaultCase(node);
    }

    public void caseAArglist(AArglist node)
    {
        defaultCase(node);
    }

    public void caseAEqVal(AEqVal node)
    {
        defaultCase(node);
    }

    public void caseAArgumentHelper(AArgumentHelper node)
    {
        defaultCase(node);
    }

    public void caseTTab(TTab node)
    {
        defaultCase(node);
    }

    public void caseTDot(TDot node)
    {
        defaultCase(node);
    }

    public void caseTClassToken(TClassToken node)
    {
        defaultCase(node);
    }

    public void caseTDef(TDef node)
    {
        defaultCase(node);
    }

    public void caseTLSqBrack(TLSqBrack node)
    {
        defaultCase(node);
    }

    public void caseTRSqBrack(TRSqBrack node)
    {
        defaultCase(node);
    }

    public void caseTLPar(TLPar node)
    {
        defaultCase(node);
    }

    public void caseTRPar(TRPar node)
    {
        defaultCase(node);
    }

    public void caseTExclam(TExclam node)
    {
        defaultCase(node);
    }

    public void caseTPlusplus(TPlusplus node)
    {
        defaultCase(node);
    }

    public void caseTMinmin(TMinmin node)
    {
        defaultCase(node);
    }

    public void caseTDmult(TDmult node)
    {
        defaultCase(node);
    }

    public void caseTMult(TMult node)
    {
        defaultCase(node);
    }

    public void caseTDiv(TDiv node)
    {
        defaultCase(node);
    }

    public void caseTMod(TMod node)
    {
        defaultCase(node);
    }

    public void caseTPlus(TPlus node)
    {
        defaultCase(node);
    }

    public void caseTMinus(TMinus node)
    {
        defaultCase(node);
    }

    public void caseTEqeq(TEqeq node)
    {
        defaultCase(node);
    }

    public void caseTNoteq(TNoteq node)
    {
        defaultCase(node);
    }

    public void caseTLesseq(TLesseq node)
    {
        defaultCase(node);
    }

    public void caseTMoreeq(TMoreeq node)
    {
        defaultCase(node);
    }

    public void caseTLess(TLess node)
    {
        defaultCase(node);
    }

    public void caseTGreat(TGreat node)
    {
        defaultCase(node);
    }

    public void caseTLogicAnd(TLogicAnd node)
    {
        defaultCase(node);
    }

    public void caseTDiveq(TDiveq node)
    {
        defaultCase(node);
    }

    public void caseTMulteq(TMulteq node)
    {
        defaultCase(node);
    }

    public void caseTPluseq(TPluseq node)
    {
        defaultCase(node);
    }

    public void caseTMineq(TMineq node)
    {
        defaultCase(node);
    }

    public void caseTAssert(TAssert node)
    {
        defaultCase(node);
    }

    public void caseTLen(TLen node)
    {
        defaultCase(node);
    }

    public void caseTMax(TMax node)
    {
        defaultCase(node);
    }

    public void caseTMin(TMin node)
    {
        defaultCase(node);
    }

    public void caseTNot(TNot node)
    {
        defaultCase(node);
    }

    public void caseTNone(TNone node)
    {
        defaultCase(node);
    }

    public void caseTAnd(TAnd node)
    {
        defaultCase(node);
    }

    public void caseTOr(TOr node)
    {
        defaultCase(node);
    }

    public void caseTEq(TEq node)
    {
        defaultCase(node);
    }

    public void caseTComma(TComma node)
    {
        defaultCase(node);
    }

    public void caseTIf(TIf node)
    {
        defaultCase(node);
    }

    public void caseTElif(TElif node)
    {
        defaultCase(node);
    }

    public void caseTElse(TElse node)
    {
        defaultCase(node);
    }

    public void caseTFor(TFor node)
    {
        defaultCase(node);
    }

    public void caseTIn(TIn node)
    {
        defaultCase(node);
    }

    public void caseTWhile(TWhile node)
    {
        defaultCase(node);
    }

    public void caseTPrint(TPrint node)
    {
        defaultCase(node);
    }

    public void caseTReturn(TReturn node)
    {
        defaultCase(node);
    }

    public void caseTSemi(TSemi node)
    {
        defaultCase(node);
    }

    public void caseTTrue(TTrue node)
    {
        defaultCase(node);
    }

    public void caseTFalse(TFalse node)
    {
        defaultCase(node);
    }

    public void caseTDictt(TDictt node)
    {
        defaultCase(node);
    }

    public void caseTQuote(TQuote node)
    {
        defaultCase(node);
    }

    public void caseTSinquote(TSinquote node)
    {
        defaultCase(node);
    }

    public void caseTBlank(TBlank node)
    {
        defaultCase(node);
    }

    public void caseTLineComment(TLineComment node)
    {
        defaultCase(node);
    }

    public void caseTNumber(TNumber node)
    {
        defaultCase(node);
    }

    public void caseTString(TString node)
    {
        defaultCase(node);
    }

    public void caseTId(TId node)
    {
        defaultCase(node);
    }

    public void caseEOF(EOF node)
    {
        defaultCase(node);
    }

    public void defaultCase(Node node)
    {
    }
}
