/* This file was generated by SableCC (http://www.sablecc.org/). */

package minipython.analysis;

import minipython.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object in);
    Object getOut(Node node);
    void setOut(Node node, Object out);

    void caseStart(Start node);
    void caseAProgramme(AProgramme node);
    void caseAStatCommands(AStatCommands node);
    void caseAFunctCommands(AFunctCommands node);
    void caseAFunction(AFunction node);
    void caseAArgument(AArgument node);
    void caseAIfStmtStatement(AIfStmtStatement node);
    void caseAWhileStmtStatement(AWhileStmtStatement node);
    void caseAForStmtStatement(AForStmtStatement node);
    void caseAReturnStmtStatement(AReturnStmtStatement node);
    void caseAPrintStmtStatement(APrintStmtStatement node);
    void caseAEqStmtStatement(AEqStmtStatement node);
    void caseAMineqStmtStatement(AMineqStmtStatement node);
    void caseADiveqStmtStatement(ADiveqStmtStatement node);
    void caseAArrayStmtStatement(AArrayStmtStatement node);
    void caseAAssertStmtStatement(AAssertStmtStatement node);
    void caseAFunccallStmtStatement(AFunccallStmtStatement node);
    void caseAOrcComparison(AOrcComparison node);
    void caseAAndComparisonComparison(AAndComparisonComparison node);
    void caseANotcComparison(ANotcComparison node);
    void caseAGreatcComparison(AGreatcComparison node);
    void caseALesscComparison(ALesscComparison node);
    void caseAGreateqcComparison(AGreateqcComparison node);
    void caseALesseqcComparison(ALesseqcComparison node);
    void caseANoteqcComparison(ANoteqcComparison node);
    void caseAEqcComparison(AEqcComparison node);
    void caseATrueComparison(ATrueComparison node);
    void caseAFalseComparison(AFalseComparison node);
    void caseAAddExpression(AAddExpression node);
    void caseAMinusExpression(AMinusExpression node);
    void caseAMultiplicationExpression(AMultiplicationExpression node);
    void caseADivisionExpression(ADivisionExpression node);
    void caseAModulusExpression(AModulusExpression node);
    void caseAExponExpression(AExponExpression node);
    void caseAArrayExpression(AArrayExpression node);
    void caseAFuncExpression(AFuncExpression node);
    void caseAIdentifierExpression(AIdentifierExpression node);
    void caseAValueExpression(AValueExpression node);
    void caseAPlusplusExpression(APlusplusExpression node);
    void caseAMinminExpression(AMinminExpression node);
    void caseALenExpression(ALenExpression node);
    void caseAMaxExpression(AMaxExpression node);
    void caseAMinExpression(AMinExpression node);
    void caseAParExpression(AParExpression node);
    void caseASqbrExpression(ASqbrExpression node);
    void caseAFunccallExpression(AFunccallExpression node);
    void caseAMoreExprExpression(AMoreExprExpression node);
    void caseAMoreValExpression(AMoreValExpression node);
    void caseANumExpression(ANumExpression node);
    void caseAStrExpression(AStrExpression node);
    void caseAIdentExpression(AIdentExpression node);
    void caseANoneExpression(ANoneExpression node);
    void caseAFunctionCall(AFunctionCall node);
    void caseAArglist(AArglist node);
    void caseAEqVal(AEqVal node);
    void caseAArgumentHelper(AArgumentHelper node);

    void caseTTab(TTab node);
    void caseTDot(TDot node);
    void caseTClassToken(TClassToken node);
    void caseTDef(TDef node);
    void caseTLSqBrack(TLSqBrack node);
    void caseTRSqBrack(TRSqBrack node);
    void caseTLPar(TLPar node);
    void caseTRPar(TRPar node);
    void caseTExclam(TExclam node);
    void caseTPlusplus(TPlusplus node);
    void caseTMinmin(TMinmin node);
    void caseTDmult(TDmult node);
    void caseTMult(TMult node);
    void caseTDiv(TDiv node);
    void caseTMod(TMod node);
    void caseTPlus(TPlus node);
    void caseTMinus(TMinus node);
    void caseTEqeq(TEqeq node);
    void caseTNoteq(TNoteq node);
    void caseTLesseq(TLesseq node);
    void caseTMoreeq(TMoreeq node);
    void caseTLess(TLess node);
    void caseTGreat(TGreat node);
    void caseTLogicAnd(TLogicAnd node);
    void caseTDiveq(TDiveq node);
    void caseTMulteq(TMulteq node);
    void caseTPluseq(TPluseq node);
    void caseTMineq(TMineq node);
    void caseTAssert(TAssert node);
    void caseTLen(TLen node);
    void caseTMax(TMax node);
    void caseTMin(TMin node);
    void caseTNot(TNot node);
    void caseTNone(TNone node);
    void caseTAnd(TAnd node);
    void caseTOr(TOr node);
    void caseTEq(TEq node);
    void caseTComma(TComma node);
    void caseTIf(TIf node);
    void caseTElif(TElif node);
    void caseTElse(TElse node);
    void caseTFor(TFor node);
    void caseTIn(TIn node);
    void caseTWhile(TWhile node);
    void caseTPrint(TPrint node);
    void caseTReturn(TReturn node);
    void caseTSemi(TSemi node);
    void caseTTrue(TTrue node);
    void caseTFalse(TFalse node);
    void caseTDictt(TDictt node);
    void caseTQuote(TQuote node);
    void caseTSinquote(TSinquote node);
    void caseTBlank(TBlank node);
    void caseTLineComment(TLineComment node);
    void caseTNumber(TNumber node);
    void caseTString(TString node);
    void caseTId(TId node);
    void caseEOF(EOF node);
}
