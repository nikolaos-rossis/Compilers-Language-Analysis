/* This file was generated by SableCC (http://www.sablecc.org/). */

package minipython.analysis;

import java.util.*;
import minipython.node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(Node node)
    {
    }

    public void defaultOut(Node node)
    {
    }

    public void caseStart(Start node)
    {
        inStart(node);
        node.getPProgramme().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inAProgramme(AProgramme node)
    {
        defaultIn(node);
    }

    public void outAProgramme(AProgramme node)
    {
        defaultOut(node);
    }

    public void caseAProgramme(AProgramme node)
    {
        inAProgramme(node);
        {
            Object temp[] = node.getCommands().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PCommands) temp[i]).apply(this);
            }
        }
        outAProgramme(node);
    }

    public void inAStatCommands(AStatCommands node)
    {
        defaultIn(node);
    }

    public void outAStatCommands(AStatCommands node)
    {
        defaultOut(node);
    }

    public void caseAStatCommands(AStatCommands node)
    {
        inAStatCommands(node);
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        outAStatCommands(node);
    }

    public void inAFunctCommands(AFunctCommands node)
    {
        defaultIn(node);
    }

    public void outAFunctCommands(AFunctCommands node)
    {
        defaultOut(node);
    }

    public void caseAFunctCommands(AFunctCommands node)
    {
        inAFunctCommands(node);
        if(node.getFunction() != null)
        {
            node.getFunction().apply(this);
        }
        outAFunctCommands(node);
    }

    public void inAFunction(AFunction node)
    {
        defaultIn(node);
    }

    public void outAFunction(AFunction node)
    {
        defaultOut(node);
    }

    public void caseAFunction(AFunction node)
    {
        inAFunction(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        {
            Object temp[] = node.getArgument().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PArgument) temp[i]).apply(this);
            }
        }
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        outAFunction(node);
    }

    public void inAArgument(AArgument node)
    {
        defaultIn(node);
    }

    public void outAArgument(AArgument node)
    {
        defaultOut(node);
    }

    public void caseAArgument(AArgument node)
    {
        inAArgument(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        {
            Object temp[] = node.getEqVal().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PEqVal) temp[i]).apply(this);
            }
        }
        {
            Object temp[] = node.getArgumentHelper().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PArgumentHelper) temp[i]).apply(this);
            }
        }
        outAArgument(node);
    }

    public void inAIfStmtStatement(AIfStmtStatement node)
    {
        defaultIn(node);
    }

    public void outAIfStmtStatement(AIfStmtStatement node)
    {
        defaultOut(node);
    }

    public void caseAIfStmtStatement(AIfStmtStatement node)
    {
        inAIfStmtStatement(node);
        if(node.getComparison() != null)
        {
            node.getComparison().apply(this);
        }
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        outAIfStmtStatement(node);
    }

    public void inAWhileStmtStatement(AWhileStmtStatement node)
    {
        defaultIn(node);
    }

    public void outAWhileStmtStatement(AWhileStmtStatement node)
    {
        defaultOut(node);
    }

    public void caseAWhileStmtStatement(AWhileStmtStatement node)
    {
        inAWhileStmtStatement(node);
        if(node.getComparison() != null)
        {
            node.getComparison().apply(this);
        }
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        outAWhileStmtStatement(node);
    }

    public void inAForStmtStatement(AForStmtStatement node)
    {
        defaultIn(node);
    }

    public void outAForStmtStatement(AForStmtStatement node)
    {
        defaultOut(node);
    }

    public void caseAForStmtStatement(AForStmtStatement node)
    {
        inAForStmtStatement(node);
        if(node.getLId() != null)
        {
            node.getLId().apply(this);
        }
        if(node.getRId() != null)
        {
            node.getRId().apply(this);
        }
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        outAForStmtStatement(node);
    }

    public void inAReturnStmtStatement(AReturnStmtStatement node)
    {
        defaultIn(node);
    }

    public void outAReturnStmtStatement(AReturnStmtStatement node)
    {
        defaultOut(node);
    }

    public void caseAReturnStmtStatement(AReturnStmtStatement node)
    {
        inAReturnStmtStatement(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAReturnStmtStatement(node);
    }

    public void inAPrintStmtStatement(APrintStmtStatement node)
    {
        defaultIn(node);
    }

    public void outAPrintStmtStatement(APrintStmtStatement node)
    {
        defaultOut(node);
    }

    public void caseAPrintStmtStatement(APrintStmtStatement node)
    {
        inAPrintStmtStatement(node);
        if(node.getLExpr() != null)
        {
            node.getLExpr().apply(this);
        }
        {
            Object temp[] = node.getRExpr().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PExpression) temp[i]).apply(this);
            }
        }
        outAPrintStmtStatement(node);
    }

    public void inAEqStmtStatement(AEqStmtStatement node)
    {
        defaultIn(node);
    }

    public void outAEqStmtStatement(AEqStmtStatement node)
    {
        defaultOut(node);
    }

    public void caseAEqStmtStatement(AEqStmtStatement node)
    {
        inAEqStmtStatement(node);
        if(node.getLExpr() != null)
        {
            node.getLExpr().apply(this);
        }
        if(node.getRExpr() != null)
        {
            node.getRExpr().apply(this);
        }
        outAEqStmtStatement(node);
    }

    public void inAMineqStmtStatement(AMineqStmtStatement node)
    {
        defaultIn(node);
    }

    public void outAMineqStmtStatement(AMineqStmtStatement node)
    {
        defaultOut(node);
    }

    public void caseAMineqStmtStatement(AMineqStmtStatement node)
    {
        inAMineqStmtStatement(node);
        if(node.getLExpr() != null)
        {
            node.getLExpr().apply(this);
        }
        if(node.getRExpr() != null)
        {
            node.getRExpr().apply(this);
        }
        outAMineqStmtStatement(node);
    }

    public void inADiveqStmtStatement(ADiveqStmtStatement node)
    {
        defaultIn(node);
    }

    public void outADiveqStmtStatement(ADiveqStmtStatement node)
    {
        defaultOut(node);
    }

    public void caseADiveqStmtStatement(ADiveqStmtStatement node)
    {
        inADiveqStmtStatement(node);
        if(node.getLExpr() != null)
        {
            node.getLExpr().apply(this);
        }
        if(node.getRExpr() != null)
        {
            node.getRExpr().apply(this);
        }
        outADiveqStmtStatement(node);
    }

    public void inAArrayStmtStatement(AArrayStmtStatement node)
    {
        defaultIn(node);
    }

    public void outAArrayStmtStatement(AArrayStmtStatement node)
    {
        defaultOut(node);
    }

    public void caseAArrayStmtStatement(AArrayStmtStatement node)
    {
        inAArrayStmtStatement(node);
        if(node.getIdExpr() != null)
        {
            node.getIdExpr().apply(this);
        }
        if(node.getLExp() != null)
        {
            node.getLExp().apply(this);
        }
        if(node.getRExp() != null)
        {
            node.getRExp().apply(this);
        }
        outAArrayStmtStatement(node);
    }

    public void inAAssertStmtStatement(AAssertStmtStatement node)
    {
        defaultIn(node);
    }

    public void outAAssertStmtStatement(AAssertStmtStatement node)
    {
        defaultOut(node);
    }

    public void caseAAssertStmtStatement(AAssertStmtStatement node)
    {
        inAAssertStmtStatement(node);
        if(node.getLExpr() != null)
        {
            node.getLExpr().apply(this);
        }
        {
            Object temp[] = node.getRExpr().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PExpression) temp[i]).apply(this);
            }
        }
        outAAssertStmtStatement(node);
    }

    public void inAFunccallStmtStatement(AFunccallStmtStatement node)
    {
        defaultIn(node);
    }

    public void outAFunccallStmtStatement(AFunccallStmtStatement node)
    {
        defaultOut(node);
    }

    public void caseAFunccallStmtStatement(AFunccallStmtStatement node)
    {
        inAFunccallStmtStatement(node);
        if(node.getFunctionCall() != null)
        {
            node.getFunctionCall().apply(this);
        }
        outAFunccallStmtStatement(node);
    }

    public void inAOrcComparison(AOrcComparison node)
    {
        defaultIn(node);
    }

    public void outAOrcComparison(AOrcComparison node)
    {
        defaultOut(node);
    }

    public void caseAOrcComparison(AOrcComparison node)
    {
        inAOrcComparison(node);
        if(node.getLComp() != null)
        {
            node.getLComp().apply(this);
        }
        if(node.getRCompa() != null)
        {
            node.getRCompa().apply(this);
        }
        outAOrcComparison(node);
    }

    public void inAAndComparisonComparison(AAndComparisonComparison node)
    {
        defaultIn(node);
    }

    public void outAAndComparisonComparison(AAndComparisonComparison node)
    {
        defaultOut(node);
    }

    public void caseAAndComparisonComparison(AAndComparisonComparison node)
    {
        inAAndComparisonComparison(node);
        if(node.getLComp() != null)
        {
            node.getLComp().apply(this);
        }
        if(node.getRComp() != null)
        {
            node.getRComp().apply(this);
        }
        outAAndComparisonComparison(node);
    }

    public void inANotcComparison(ANotcComparison node)
    {
        defaultIn(node);
    }

    public void outANotcComparison(ANotcComparison node)
    {
        defaultOut(node);
    }

    public void caseANotcComparison(ANotcComparison node)
    {
        inANotcComparison(node);
        if(node.getComparison() != null)
        {
            node.getComparison().apply(this);
        }
        outANotcComparison(node);
    }

    public void inAGreatcComparison(AGreatcComparison node)
    {
        defaultIn(node);
    }

    public void outAGreatcComparison(AGreatcComparison node)
    {
        defaultOut(node);
    }

    public void caseAGreatcComparison(AGreatcComparison node)
    {
        inAGreatcComparison(node);
        if(node.getLexpr() != null)
        {
            node.getLexpr().apply(this);
        }
        if(node.getRexpr() != null)
        {
            node.getRexpr().apply(this);
        }
        outAGreatcComparison(node);
    }

    public void inALesscComparison(ALesscComparison node)
    {
        defaultIn(node);
    }

    public void outALesscComparison(ALesscComparison node)
    {
        defaultOut(node);
    }

    public void caseALesscComparison(ALesscComparison node)
    {
        inALesscComparison(node);
        if(node.getLexpr() != null)
        {
            node.getLexpr().apply(this);
        }
        if(node.getRexpr() != null)
        {
            node.getRexpr().apply(this);
        }
        outALesscComparison(node);
    }

    public void inAGreateqcComparison(AGreateqcComparison node)
    {
        defaultIn(node);
    }

    public void outAGreateqcComparison(AGreateqcComparison node)
    {
        defaultOut(node);
    }

    public void caseAGreateqcComparison(AGreateqcComparison node)
    {
        inAGreateqcComparison(node);
        if(node.getLexpr() != null)
        {
            node.getLexpr().apply(this);
        }
        if(node.getRexpr() != null)
        {
            node.getRexpr().apply(this);
        }
        outAGreateqcComparison(node);
    }

    public void inALesseqcComparison(ALesseqcComparison node)
    {
        defaultIn(node);
    }

    public void outALesseqcComparison(ALesseqcComparison node)
    {
        defaultOut(node);
    }

    public void caseALesseqcComparison(ALesseqcComparison node)
    {
        inALesseqcComparison(node);
        if(node.getLexpr() != null)
        {
            node.getLexpr().apply(this);
        }
        if(node.getRexpr() != null)
        {
            node.getRexpr().apply(this);
        }
        outALesseqcComparison(node);
    }

    public void inANoteqcComparison(ANoteqcComparison node)
    {
        defaultIn(node);
    }

    public void outANoteqcComparison(ANoteqcComparison node)
    {
        defaultOut(node);
    }

    public void caseANoteqcComparison(ANoteqcComparison node)
    {
        inANoteqcComparison(node);
        if(node.getLexpr() != null)
        {
            node.getLexpr().apply(this);
        }
        if(node.getRexpr() != null)
        {
            node.getRexpr().apply(this);
        }
        outANoteqcComparison(node);
    }

    public void inAEqcComparison(AEqcComparison node)
    {
        defaultIn(node);
    }

    public void outAEqcComparison(AEqcComparison node)
    {
        defaultOut(node);
    }

    public void caseAEqcComparison(AEqcComparison node)
    {
        inAEqcComparison(node);
        if(node.getLexpr() != null)
        {
            node.getLexpr().apply(this);
        }
        if(node.getRexpr() != null)
        {
            node.getRexpr().apply(this);
        }
        outAEqcComparison(node);
    }

    public void inATrueComparison(ATrueComparison node)
    {
        defaultIn(node);
    }

    public void outATrueComparison(ATrueComparison node)
    {
        defaultOut(node);
    }

    public void caseATrueComparison(ATrueComparison node)
    {
        inATrueComparison(node);
        outATrueComparison(node);
    }

    public void inAFalseComparison(AFalseComparison node)
    {
        defaultIn(node);
    }

    public void outAFalseComparison(AFalseComparison node)
    {
        defaultOut(node);
    }

    public void caseAFalseComparison(AFalseComparison node)
    {
        inAFalseComparison(node);
        outAFalseComparison(node);
    }

    public void inAAddExpression(AAddExpression node)
    {
        defaultIn(node);
    }

    public void outAAddExpression(AAddExpression node)
    {
        defaultOut(node);
    }

    public void caseAAddExpression(AAddExpression node)
    {
        inAAddExpression(node);
        if(node.getLExp() != null)
        {
            node.getLExp().apply(this);
        }
        if(node.getRExp() != null)
        {
            node.getRExp().apply(this);
        }
        outAAddExpression(node);
    }

    public void inAMinusExpression(AMinusExpression node)
    {
        defaultIn(node);
    }

    public void outAMinusExpression(AMinusExpression node)
    {
        defaultOut(node);
    }

    public void caseAMinusExpression(AMinusExpression node)
    {
        inAMinusExpression(node);
        if(node.getLExp() != null)
        {
            node.getLExp().apply(this);
        }
        if(node.getRExp() != null)
        {
            node.getRExp().apply(this);
        }
        outAMinusExpression(node);
    }

    public void inAMultiplicationExpression(AMultiplicationExpression node)
    {
        defaultIn(node);
    }

    public void outAMultiplicationExpression(AMultiplicationExpression node)
    {
        defaultOut(node);
    }

    public void caseAMultiplicationExpression(AMultiplicationExpression node)
    {
        inAMultiplicationExpression(node);
        if(node.getLExp() != null)
        {
            node.getLExp().apply(this);
        }
        if(node.getRExp() != null)
        {
            node.getRExp().apply(this);
        }
        outAMultiplicationExpression(node);
    }

    public void inADivisionExpression(ADivisionExpression node)
    {
        defaultIn(node);
    }

    public void outADivisionExpression(ADivisionExpression node)
    {
        defaultOut(node);
    }

    public void caseADivisionExpression(ADivisionExpression node)
    {
        inADivisionExpression(node);
        if(node.getLExp() != null)
        {
            node.getLExp().apply(this);
        }
        if(node.getRExp() != null)
        {
            node.getRExp().apply(this);
        }
        outADivisionExpression(node);
    }

    public void inAModulusExpression(AModulusExpression node)
    {
        defaultIn(node);
    }

    public void outAModulusExpression(AModulusExpression node)
    {
        defaultOut(node);
    }

    public void caseAModulusExpression(AModulusExpression node)
    {
        inAModulusExpression(node);
        if(node.getLExp() != null)
        {
            node.getLExp().apply(this);
        }
        if(node.getRExp() != null)
        {
            node.getRExp().apply(this);
        }
        outAModulusExpression(node);
    }

    public void inAExponExpression(AExponExpression node)
    {
        defaultIn(node);
    }

    public void outAExponExpression(AExponExpression node)
    {
        defaultOut(node);
    }

    public void caseAExponExpression(AExponExpression node)
    {
        inAExponExpression(node);
        if(node.getLExp() != null)
        {
            node.getLExp().apply(this);
        }
        if(node.getRExp() != null)
        {
            node.getRExp().apply(this);
        }
        outAExponExpression(node);
    }

    public void inAArrayExpression(AArrayExpression node)
    {
        defaultIn(node);
    }

    public void outAArrayExpression(AArrayExpression node)
    {
        defaultOut(node);
    }

    public void caseAArrayExpression(AArrayExpression node)
    {
        inAArrayExpression(node);
        if(node.getLExp() != null)
        {
            node.getLExp().apply(this);
        }
        if(node.getRExp() != null)
        {
            node.getRExp().apply(this);
        }
        outAArrayExpression(node);
    }

    public void inAFuncExpression(AFuncExpression node)
    {
        defaultIn(node);
    }

    public void outAFuncExpression(AFuncExpression node)
    {
        defaultOut(node);
    }

    public void caseAFuncExpression(AFuncExpression node)
    {
        inAFuncExpression(node);
        if(node.getFunctionCall() != null)
        {
            node.getFunctionCall().apply(this);
        }
        outAFuncExpression(node);
    }

    public void inAIdentifierExpression(AIdentifierExpression node)
    {
        defaultIn(node);
    }

    public void outAIdentifierExpression(AIdentifierExpression node)
    {
        defaultOut(node);
    }

    public void caseAIdentifierExpression(AIdentifierExpression node)
    {
        inAIdentifierExpression(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAIdentifierExpression(node);
    }

    public void inAValueExpression(AValueExpression node)
    {
        defaultIn(node);
    }

    public void outAValueExpression(AValueExpression node)
    {
        defaultOut(node);
    }

    public void caseAValueExpression(AValueExpression node)
    {
        inAValueExpression(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAValueExpression(node);
    }

    public void inAPlusplusExpression(APlusplusExpression node)
    {
        defaultIn(node);
    }

    public void outAPlusplusExpression(APlusplusExpression node)
    {
        defaultOut(node);
    }

    public void caseAPlusplusExpression(APlusplusExpression node)
    {
        inAPlusplusExpression(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAPlusplusExpression(node);
    }

    public void inAMinminExpression(AMinminExpression node)
    {
        defaultIn(node);
    }

    public void outAMinminExpression(AMinminExpression node)
    {
        defaultOut(node);
    }

    public void caseAMinminExpression(AMinminExpression node)
    {
        inAMinminExpression(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAMinminExpression(node);
    }

    public void inALenExpression(ALenExpression node)
    {
        defaultIn(node);
    }

    public void outALenExpression(ALenExpression node)
    {
        defaultOut(node);
    }

    public void caseALenExpression(ALenExpression node)
    {
        inALenExpression(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outALenExpression(node);
    }

    public void inAMaxExpression(AMaxExpression node)
    {
        defaultIn(node);
    }

    public void outAMaxExpression(AMaxExpression node)
    {
        defaultOut(node);
    }

    public void caseAMaxExpression(AMaxExpression node)
    {
        inAMaxExpression(node);
        if(node.getLExp() != null)
        {
            node.getLExp().apply(this);
        }
        {
            Object temp[] = node.getRExp().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PExpression) temp[i]).apply(this);
            }
        }
        outAMaxExpression(node);
    }

    public void inAMinExpression(AMinExpression node)
    {
        defaultIn(node);
    }

    public void outAMinExpression(AMinExpression node)
    {
        defaultOut(node);
    }

    public void caseAMinExpression(AMinExpression node)
    {
        inAMinExpression(node);
        if(node.getLExp() != null)
        {
            node.getLExp().apply(this);
        }
        {
            Object temp[] = node.getRExp().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PExpression) temp[i]).apply(this);
            }
        }
        outAMinExpression(node);
    }

    public void inAParExpression(AParExpression node)
    {
        defaultIn(node);
    }

    public void outAParExpression(AParExpression node)
    {
        defaultOut(node);
    }

    public void caseAParExpression(AParExpression node)
    {
        inAParExpression(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAParExpression(node);
    }

    public void inASqbrExpression(ASqbrExpression node)
    {
        defaultIn(node);
    }

    public void outASqbrExpression(ASqbrExpression node)
    {
        defaultOut(node);
    }

    public void caseASqbrExpression(ASqbrExpression node)
    {
        inASqbrExpression(node);
        if(node.getLExp() != null)
        {
            node.getLExp().apply(this);
        }
        {
            Object temp[] = node.getRExp().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PExpression) temp[i]).apply(this);
            }
        }
        outASqbrExpression(node);
    }

    public void inAFunccallExpression(AFunccallExpression node)
    {
        defaultIn(node);
    }

    public void outAFunccallExpression(AFunccallExpression node)
    {
        defaultOut(node);
    }

    public void caseAFunccallExpression(AFunccallExpression node)
    {
        inAFunccallExpression(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getFunctionCall() != null)
        {
            node.getFunctionCall().apply(this);
        }
        outAFunccallExpression(node);
    }

    public void inAMoreExprExpression(AMoreExprExpression node)
    {
        defaultIn(node);
    }

    public void outAMoreExprExpression(AMoreExprExpression node)
    {
        defaultOut(node);
    }

    public void caseAMoreExprExpression(AMoreExprExpression node)
    {
        inAMoreExprExpression(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAMoreExprExpression(node);
    }

    public void inAMoreValExpression(AMoreValExpression node)
    {
        defaultIn(node);
    }

    public void outAMoreValExpression(AMoreValExpression node)
    {
        defaultOut(node);
    }

    public void caseAMoreValExpression(AMoreValExpression node)
    {
        inAMoreValExpression(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAMoreValExpression(node);
    }

    public void inANumExpression(ANumExpression node)
    {
        defaultIn(node);
    }

    public void outANumExpression(ANumExpression node)
    {
        defaultOut(node);
    }

    public void caseANumExpression(ANumExpression node)
    {
        inANumExpression(node);
        if(node.getNumber() != null)
        {
            node.getNumber().apply(this);
        }
        outANumExpression(node);
    }

    public void inAStrExpression(AStrExpression node)
    {
        defaultIn(node);
    }

    public void outAStrExpression(AStrExpression node)
    {
        defaultOut(node);
    }

    public void caseAStrExpression(AStrExpression node)
    {
        inAStrExpression(node);
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        outAStrExpression(node);
    }

    public void inAIdentExpression(AIdentExpression node)
    {
        defaultIn(node);
    }

    public void outAIdentExpression(AIdentExpression node)
    {
        defaultOut(node);
    }

    public void caseAIdentExpression(AIdentExpression node)
    {
        inAIdentExpression(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAIdentExpression(node);
    }

    public void inANoneExpression(ANoneExpression node)
    {
        defaultIn(node);
    }

    public void outANoneExpression(ANoneExpression node)
    {
        defaultOut(node);
    }

    public void caseANoneExpression(ANoneExpression node)
    {
        inANoneExpression(node);
        if(node.getNone() != null)
        {
            node.getNone().apply(this);
        }
        outANoneExpression(node);
    }

    public void inAFunctionCall(AFunctionCall node)
    {
        defaultIn(node);
    }

    public void outAFunctionCall(AFunctionCall node)
    {
        defaultOut(node);
    }

    public void caseAFunctionCall(AFunctionCall node)
    {
        inAFunctionCall(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        {
            Object temp[] = node.getArglist().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PArglist) temp[i]).apply(this);
            }
        }
        outAFunctionCall(node);
    }

    public void inAArglist(AArglist node)
    {
        defaultIn(node);
    }

    public void outAArglist(AArglist node)
    {
        defaultOut(node);
    }

    public void caseAArglist(AArglist node)
    {
        inAArglist(node);
        if(node.getLExpr() != null)
        {
            node.getLExpr().apply(this);
        }
        {
            Object temp[] = node.getRExpr().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PExpression) temp[i]).apply(this);
            }
        }
        outAArglist(node);
    }

    public void inAEqVal(AEqVal node)
    {
        defaultIn(node);
    }

    public void outAEqVal(AEqVal node)
    {
        defaultOut(node);
    }

    public void caseAEqVal(AEqVal node)
    {
        inAEqVal(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAEqVal(node);
    }

    public void inAArgumentHelper(AArgumentHelper node)
    {
        defaultIn(node);
    }

    public void outAArgumentHelper(AArgumentHelper node)
    {
        defaultOut(node);
    }

    public void caseAArgumentHelper(AArgumentHelper node)
    {
        inAArgumentHelper(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        {
            Object temp[] = node.getEqVal().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PEqVal) temp[i]).apply(this);
            }
        }
        outAArgumentHelper(node);
    }
}
